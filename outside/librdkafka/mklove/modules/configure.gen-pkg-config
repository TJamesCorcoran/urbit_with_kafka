#!/bin/bash
#
# Generates pkg-config file for library.
#
# Arguments:
#  libname     (e.g., "rdkafka" for librdkafka)
#  name        (e.g., "The Apache Kafka C/C++ library")
#  description (e.g., "A full producer and consumer for Apache Kafka 0.8...")
#  version     (e.g., "1.2.3" or "$VERSION" or "\$VERSION" (for late reference)

if [[ -z "$4" ]]; then
    mkl_fail "pkg_config_gen" "none" "fail" \
        "Missing arguments to module: syntax: libname name description version"
else
    mkl_var_set "MKL__PKG_CONFIG_libname" "$1"
    mkl_var_set "MKL__PKG_CONFIG_name" "$2"
    mkl_var_set "MKL__PKG_CONFIG_desc" "$3"
    mkl_var_set "MKL__PKG_CONFIG_version" "$4"
fi


# Add line to generated pkg-config file.
# Arguments:
#  line
function mkl_pkg-config_append {
    printf -v "MKL__PKG_CONFIG_extra" "%s%s" "${MKL__PKG_CONFIG_extra}" "$1
"
}


# Generate .pc file
function generate {
    local fname="$(mkl_var_get MKL__PKG_CONFIG_libname).pc"

    # Evaluate late reference variables in version
    local ver=$(eval echo ${MKL__PKG_CONFIG_version})

    echo > $fname \
        "prefix=$prefix
libdir=$libdir
includedir=$includedir

Name: ${MKL__PKG_CONFIG_name}
Description: ${MKL__PKG_CONFIG_desc}
Version: $ver
Cflags: -I\${includedir}
Libs: -L\${libdir} -l${MKL__PKG_CONFIG_libname}
${MKL__PKG_CONFIG_extra}"

    echo "Generated $fname"
}

# Cleanup .pc file
function clean {
    local fname="$(mkl_var_get MKL__PKG_CONFIG_libname).pc"
    mkl_rm "$fname"
}
